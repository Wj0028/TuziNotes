import{_ as p,W as o,X as c,Y as a,$ as n,a1 as e,a0 as i,Z as s,C as l}from"./framework-5fb02f36.js";const u={},r=s(`<h1 id="一、vue3" tabindex="-1"><a class="header-anchor" href="#一、vue3" aria-hidden="true">#</a> 一、Vue3</h1><h2 id="_1、引入-vue-库" tabindex="-1"><a class="header-anchor" href="#_1、引入-vue-库" aria-hidden="true">#</a> 1、引入 Vue 库</h2><p>如果你想要在一个新项目里快速尝试 Vue 3：</p><ul><li>通过 CDN：<code>&lt;script src=&quot;https://unpkg.com/vue@next&quot;&gt;&lt;/script&gt;</code></li></ul><h2 id="_2、编写第一个-vue3-程序" tabindex="-1"><a class="header-anchor" href="#_2、编写第一个-vue3-程序" aria-hidden="true">#</a> 2、编写第一个 Vue3 程序</h2><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>counter<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Counter: {{ counter }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> Counter <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token punctuation">{</span>
			<span class="token literal-property property">counter</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span>Counter<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&#39;#counter&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3、做个-todolist" tabindex="-1"><a class="header-anchor" href="#_3、做个-todolist" aria-hidden="true">#</a> 3、做个 TodoList</h2><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>todo-list-app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>todo-item</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item in groceryList<span class="token punctuation">&quot;</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>todo</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item<span class="token punctuation">&quot;</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item.id<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>todo-item</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
	<span class="token keyword">const</span> TodoItem <span class="token operator">=</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;todo&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
		<span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;li&gt;{{ todo.text }}&lt;/li&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token keyword">const</span> TodoList <span class="token operator">=</span> <span class="token punctuation">{</span>
		<span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token punctuation">{</span>
				<span class="token literal-property property">groceryList</span><span class="token operator">:</span> <span class="token punctuation">[</span>
					<span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&#39;谈恋爱&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
					<span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&#39;打游戏&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
					<span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&#39;玩手机&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
				<span class="token punctuation">]</span><span class="token punctuation">,</span>
			<span class="token punctuation">}</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>
			TodoItem<span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span>TodoList<span class="token punctuation">)</span><span class="token punctuation">;</span>
	app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&#39;#todo-list-app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4、应用和组件实例" tabindex="-1"><a class="header-anchor" href="#_4、应用和组件实例" aria-hidden="true">#</a> 4、应用和组件实例</h2><p>每个 Vue 应用都是通过用 <code>createApp</code> 函数创建一个新的<strong>应用实例</strong>开始的：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token comment">/* 选项 */</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该应用实例是用来在应用中注册“全局”组件的。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;SearchInput&#39;</span><span class="token punctuation">,</span> SearchInputComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">&#39;focus&#39;</span><span class="token punctuation">,</span> FocusDirective<span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>LocalePlugin<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>应用实例暴露的大多数方法都会返回该同一实例，允许链式：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;SearchInput&#39;</span><span class="token punctuation">,</span> SearchInputComponent<span class="token punctuation">)</span>
	<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">&#39;focus&#39;</span><span class="token punctuation">,</span> FocusDirective<span class="token punctuation">)</span>
	<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>LocalePlugin<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5、生命周期函数" tabindex="-1"><a class="header-anchor" href="#_5、生命周期函数" aria-hidden="true">#</a> 5、生命周期函数</h2><figure><img src="https://v3.cn.vuejs.org/images/lifecycle.svg" alt="实例的生命周期" tabindex="0" loading="lazy"><figcaption>实例的生命周期</figcaption></figure><p>beforeUnmount、unmouted 是 Vue3 调整的钩子。并且通过 app.unmount() 函数触发组件销毁。</p><h2 id="_6、data-property-和方法" tabindex="-1"><a class="header-anchor" href="#_6、data-property-和方法" aria-hidden="true">#</a> 6、Data Property 和方法</h2><ul><li>data 只能定义成一个函数。</li><li>防抖和节流</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://unpkg.com/lodash@4.17.20/lodash.min.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
	<span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
		<span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
			<span class="token comment">// 用 Lodash 的防抖函数</span>
			<span class="token literal-property property">click</span><span class="token operator">:</span> _<span class="token punctuation">.</span><span class="token function">debounce</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token comment">// ... 响应点击 ...</span>
			<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;save-button&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
		<span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// 使用 Lodash 实现防抖</span>
			<span class="token keyword">this</span><span class="token punctuation">.</span>debouncedClick <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">debounce</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>click<span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token function">unmounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// 移除组件时，取消定时器</span>
			<span class="token keyword">this</span><span class="token punctuation">.</span>debouncedClick<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
			<span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token comment">// ... 响应点击 ...</span>
			<span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
    &lt;button @click=&quot;debouncedClick&quot;&gt;
      Save
    &lt;/button&gt;
  </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7、v-if-与-v-for" tabindex="-1"><a class="header-anchor" href="#_7、v-if-与-v-for" aria-hidden="true">#</a> 7、<code>v-if</code> 与 <code>v-for</code></h2><ul><li><p>当 <code>v-if</code> 与 <code>v-for</code> 一起使用时，<code>v-if</code> 具有比 <code>v-for</code> 更高的优先级。</p></li><li><p>v-for 中的 Ref 数组</p></li></ul><p>在 Vue 2 中，在 <code>v-for</code> 中使用的 <code>ref</code> attribute 会用 ref 数组填充相应的 <code>$refs</code> property。当存在嵌套的 <code>v-for</code> 时，这种行为会变得不明确且效率低下。</p><p>在 Vue 3 中，此类用法将不再自动创建 <code>$ref</code> 数组。要从单个绑定获取多个 ref，请将 <code>ref</code> 绑定到一个更灵活的函数上 (这是一个新特性)：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item in list<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>setItemRef<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>v-for 中 key</li></ul><h2 id="_8、多事件处理器" tabindex="-1"><a class="header-anchor" href="#_8、多事件处理器" aria-hidden="true">#</a> 8、多事件处理器</h2><p>事件处理程序中可以有多个方法，这些方法由逗号运算符分隔：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 这两个 one() 和 two() 将执行按钮点击事件 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>one($event), two($event)<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Submit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// ...</span>
<span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token function">one</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 第一个事件处理器逻辑...</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">two</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">// 第二个事件处理器逻辑...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9、按键修饰符" tabindex="-1"><a class="header-anchor" href="#_9、按键修饰符" aria-hidden="true">#</a> 9、按键修饰符</h2><ul><li>Vue2</li></ul><p>在 Vue 2 中，<code>keyCodes</code> 可以作为修改 <code>v-on</code> 方法的一种方式。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 键码版本 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">v-on:</span>keyup.13</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>

<span class="token comment">&lt;!-- 别名版本 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">v-on:</span>keyup.enter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，也可以通过全局的 <code>config.keyCodes</code> 选项定义自己的别名。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>keyCodes <span class="token operator">=</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">f1</span><span class="token operator">:</span> <span class="token number">112</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 键码版本 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">v-on:</span>keyup.112</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>showHelpText<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>

<span class="token comment">&lt;!-- 自定义别名版本 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">v-on:</span>keyup.f1</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>showHelpText<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Vue3</li></ul>`,40),d={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/KeyboardEvent/keyCode",target:"_blank",rel:"noopener noreferrer"},k=a("code",null,"KeyboardEvent.keyCode",-1),v=s(`<div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- Vue 3 在 v-on 上使用按键修饰符 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">v-on:</span>keyup.page-down</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>nextPage<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>

<span class="token comment">&lt;!-- 同时匹配 q 和 Q --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">v-on:</span>keypress.q</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>quit<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_10、-attrs包含class-style" tabindex="-1"><a class="header-anchor" href="#_10、-attrs包含class-style" aria-hidden="true">#</a> 10、<code>$attrs</code>包含<code>class</code>&amp;<code>style</code></h2><p>Vue3 中，<code>$attrs</code> 现在包含了<em>所有</em>传递给组件的 attribute，包括 <code>class</code> 和 <code>style</code>。</p><h2 id="_11、自定义事件" tabindex="-1"><a class="header-anchor" href="#_11、自定义事件" aria-hidden="true">#</a> 11、自定义事件</h2><ul><li>事件名</li></ul><p>与组件和 prop 一样，事件名提供了自动的大小写转换。如果在子组件中触发一个以 camelCase (驼峰式命名) 命名的事件，你将可以在父组件中添加一个 kebab-case (短横线分隔命名) 的监听器。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&#39;myEvent&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-component</span> <span class="token attr-name">@my-event</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>doSomething<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-component</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>自定义事件</li></ul><p>可以通过 <code>emits</code> 选项在组件上定义发出的事件。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;custom-form&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">emits</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;inFocus&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;submit&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当在 <code>emits</code> 选项中定义了原生事件 (如 <code>click</code>) 时，将使用组件中的事件<strong>替代</strong>原生事件侦听器</p><ul><li>验证抛出的事件</li></ul><p>与 prop 类型验证类似，如果使用对象语法而不是数组语法定义发出的事件，则可以对它进行验证。</p><p>要添加验证，请为事件分配一个函数，该函数接收传递给 <code>$emit</code> 调用的参数，并返回一个布尔值以指示事件是否有效。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;custom-form&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">emits</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token comment">// 没有验证</span>
		<span class="token literal-property property">click</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>

		<span class="token comment">// 验证 submit 事件</span>
		<span class="token function-variable function">submit</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> email<span class="token punctuation">,</span> password <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>email <span class="token operator">&amp;&amp;</span> password<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
				console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&#39;Invalid submit event payload!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token function">submitForm</span><span class="token punctuation">(</span><span class="token parameter">email<span class="token punctuation">,</span> password</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&#39;submit&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> email<span class="token punctuation">,</span> password <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>v-model 参数</li></ul><p>默认情况下，组件上的 <code>v-model</code> 使用 <code>modelValue</code> 作为 prop 和 <code>update:modelValue</code> 作为事件。我们可以通过向 <code>v-model</code> 传递参数来修改这些名称：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-component</span> <span class="token attr-name"><span class="token namespace">v-model:</span>title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bookTitle<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-component</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在本例中，子组件将需要一个 <code>title</code> prop 并发出 <code>update:title</code> 事件来进行同步：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;my-component&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">title</span><span class="token operator">:</span> String<span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token literal-property property">emits</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;update:title&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
    &lt;input
      type=&quot;text&quot;
      :value=&quot;title&quot;
      @input=&quot;$emit(&#39;update:title&#39;, $event.target.value)&quot;&gt;
  </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_12、插槽" tabindex="-1"><a class="header-anchor" href="#_12、插槽" aria-hidden="true">#</a> 12、插槽</h2><ul><li>插槽内容</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>todo-button</span><span class="token punctuation">&gt;</span></span>Add todo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>todo-button</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- todo-button 组件模板 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>btn-primary<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>渲染作用域</li></ul><figure><img src="https://v3.cn.vuejs.org/images/slot.png" alt="Slot explanation diagram" tabindex="0" loading="lazy"><figcaption>Slot explanation diagram</figcaption></figure><ul><li><p>备用内容</p><p>有时为一个插槽指定备用 (也就是默认的) 内容是很有用的，它只会在没有提供内容的时候被渲染。</p></li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">&gt;</span></span>Submit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>具名插槽</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>header<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>footer<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个不带 <code>name</code> 的 <code>&lt;slot&gt;</code> 出口会带有隐含的名字“default”。</p><p>在向具名插槽提供内容的时候，我们可以在一个 <code>&lt;template&gt;</code> 元素上使用 <code>v-slot</code> 指令，并以 <code>v-slot</code> 的参数的形式提供其名称：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base-layout</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>header</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>Here might be a page title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>default</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>A paragraph for the main content.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>And another one.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>footer</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Here&#39;s some contact info<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>base-layout</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>作用域插槽</li></ul><p>有时让插槽内容能够访问子组件中才有的数据是很有用的。当一个组件被用来渲染一个项目数组时，这是一个常见的情况，我们希望能够自定义每个项目的渲染方式。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;todo-list&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
	<span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token punctuation">{</span>
			<span class="token literal-property property">items</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;Feed a cat&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Buy milk&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
    &lt;ul&gt;
      &lt;li v-for=&quot;( item, index ) in items&quot;&gt;
        &lt;slot :item=&quot;item&quot;&gt;&lt;/slot&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>todo-list</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>slotProps<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>fas fa-check<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>green<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>{{ slotProps.item }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>todo-list</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://v3.cn.vuejs.org/images/scoped-slot.png" alt="Scoped slot diagram" tabindex="0" loading="lazy"><figcaption>Scoped slot diagram</figcaption></figure><h2 id="_13、provide-inject" tabindex="-1"><a class="header-anchor" href="#_13、provide-inject" aria-hidden="true">#</a> 13、Provide / Inject</h2><ul><li>一般用法</li></ul>`,41),m={href:"https://v3.cn.vuejs.org/guide/component-props.html",target:"_blank",rel:"noopener noreferrer"},g=s(`<p>对于这种情况，我们可以使用一对 <code>provide</code> 和 <code>inject</code>。无论组件层次结构有多深，父组件都可以作为其所有子组件的依赖提供者。这个特性有两个部分：父组件有一个 <code>provide</code> 选项来提供数据，子组件有一个 <code>inject</code> 选项来开始使用这些数据。</p><figure><img src="https://v3.cn.vuejs.org/images/components_provide.png" alt="Provide/inject scheme" tabindex="0" loading="lazy"><figcaption>Provide/inject scheme</figcaption></figure><p>例如，我们有这样的层次结构：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Root
└─ TodoList
   ├─ TodoItem
   └─ TodoListFooter
      ├─ ClearTodosButton
      └─ TodoListStatistics
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实现不同组件的传参。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// todolist组件</span>
<span class="token literal-property property">provide</span><span class="token operator">:</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token string">&#39;John Doe&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token comment">// TodoListStatistics组件</span>
<span class="token literal-property property">inject</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要访问组件实例 property，我们需要将 <code>provide</code> 转换为返回对象的函数：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// todolist组件</span>
<span class="token function">provide</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
  	<span class="token literal-property property">todoLength</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">.</span>length
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>处理响应性</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;todo-list&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
	<span class="token comment">// ...</span>
	<span class="token function">provide</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token punctuation">{</span>
			<span class="token literal-property property">todoLength</span><span class="token operator">:</span> Vue<span class="token punctuation">.</span><span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;todo-list-statistics&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">inject</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;todoLength&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
	<span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Injected property: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>todoLength<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &gt; 注入的 property: 5</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_14、动态组件-异步组件" tabindex="-1"><a class="header-anchor" href="#_14、动态组件-异步组件" aria-hidden="true">#</a> 14、动态组件 &amp; 异步组件</h2><ul><li><p>Vue3 对变化的总体概述：</p><ul><li><p>新的 <code>defineAsyncComponent</code> 助手方法，用于显式地定义异步组件</p></li><li><p>Loader 函数本身不再接收 <code>resolve</code> 和 <code>reject</code> 参数，且必须返回一个 Promise</p></li></ul></li><li><p><code>&lt;suspense&gt;</code> 组件提供了另一个方案，允许将等待过程提升到组件树中处理，而不是在单个组件中。</p></li></ul><h2 id="_15、处理边界情况" tabindex="-1"><a class="header-anchor" href="#_15、处理边界情况" aria-hidden="true">#</a> 15、处理边界情况</h2><p>Vue3 边界情况涉及两个内容，一个是 $forceUpdate，一个是<code>v-once</code>。</p><h2 id="_16、-children" tabindex="-1"><a class="header-anchor" href="#_16、-children" aria-hidden="true">#</a> 16、$children</h2><p><code>$children</code> 实例 property 已从 Vue 3.0 中移除，不再支持。</p><p>在 2.x 中，开发者可以使用 <code>this.$children</code> 访问当前实例的直接子组件：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>img alt<span class="token operator">=</span><span class="token string">&quot;Vue logo&quot;</span> src<span class="token operator">=</span><span class="token string">&quot;./assets/logo.png&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>my<span class="token operator">-</span>button<span class="token operator">&gt;</span>Change logo<span class="token operator">&lt;</span><span class="token operator">/</span>my<span class="token operator">-</span>button<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
<span class="token keyword">import</span> MyButton <span class="token keyword">from</span> <span class="token string">&#39;./MyButton&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    MyButton
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$children<span class="token punctuation">)</span> <span class="token comment">// [VueComponent]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,18),h=a("code",null,"$children",-1),b={href:"https://v3.cn.vuejs.org/guide/component-template-refs.html#%E6%A8%A1%E6%9D%BF%E5%BC%95%E7%94%A8",target:"_blank",rel:"noopener noreferrer"},f=s(`<h2 id="_17、自定义指令" tabindex="-1"><a class="header-anchor" href="#_17、自定义指令" aria-hidden="true">#</a> 17、自定义指令</h2><p>一个指令定义对象可以提供如下几个钩子函数 (均为可选)：</p><ul><li><p><code>created</code>：在绑定元素的 attribute 或事件监听器被应用之前调用。在指令需要附加在普通的 <code>v-on</code> 事件监听器调用前的事件监听器中时，这很有用。</p></li><li><p><code>beforeMount</code>：当指令第一次绑定到元素并且在挂载父组件之前调用。</p></li><li><p><code>mounted</code>：在绑定元素的父组件被挂载后调用。</p></li><li><p><code>beforeUpdate</code>：在更新包含组件的 VNode 之前调用。</p></li><li><p><code>updated</code>：在包含组件的 VNode <strong>及其子组件的 VNode</strong> 更新后调用。</p></li><li><p><code>beforeUnmount</code>：在卸载绑定元素的父组件之前调用</p></li><li><p><code>unmounted</code>：当指令与元素解除绑定且父组件已卸载时，只调用一次。</p></li></ul><p>在 Vue 3 中，我们为自定义指令创建了一个更具凝聚力的 API。正如你所看到的，它们与我们的组件生命周期方法有很大的不同，即使钩子的目标事件十分相似。我们现在把它们统一起来了：</p><ul><li><strong>created</strong> - 新增！在元素的 attribute 或事件监听器被应用之前调用。</li><li>bind → <strong>beforeMount</strong></li><li>inserted → <strong>mounted</strong></li><li><strong>beforeUpdate</strong>：新增！在元素本身被更新之前调用，与组件的生命周期钩子十分相似。</li><li>update → 移除！该钩子与 <code>updated</code> 有太多相似之处，因此它是多余的。请改用 <code>updated</code>。</li><li>componentUpdated → <strong>updated</strong></li><li><strong>beforeUnmount</strong>：新增！与组件的生命周期钩子类似，它将在元素被卸载之前调用。</li><li>unbind -&gt; <strong>unmounted</strong></li></ul><h2 id="_18、与自定义元素的互操作性" tabindex="-1"><a class="header-anchor" href="#_18、与自定义元素的互操作性" aria-hidden="true">#</a> 18、与自定义元素的互操作性</h2><ul><li><p>定制内置元素</p><ul><li><p>在普通元素上使用时，它将作为 <code>is</code> attribute 传递给 <code>createElement</code> 调用，并作为原生 attribute 渲染。这支持了自定义内置元素的用法。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>plastic-button<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>点击我！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>2.x 的行为：渲染 <code>plastic-button</code> 组件。</p></li><li><p>3.x 的行为：通过调用以下函数渲染原生的 button</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">is</span><span class="token operator">:</span> <span class="token string">&#39;plastic-button&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li></ul></li><li><p>使用 vue: 前缀来解决 DOM 内模板解析问题</p></li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>vue:blog-post-row<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_19、组合式-api-composition-api" tabindex="-1"><a class="header-anchor" href="#_19、组合式-api-composition-api" aria-hidden="true">#</a> 19、组合式 API-composition-api</h2>`,9),x={href:"https://vue3js.cn/vue-composition-api/#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0",target:"_blank",rel:"noopener noreferrer"},_=a("h3",{id:"_19-1、什么是组合式-api",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#_19-1、什么是组合式-api","aria-hidden":"true"},"#"),n(" 19.1、什么是组合式 API")],-1),y=s(`<h3 id="_19-2、举一个例子" tabindex="-1"><a class="header-anchor" href="#_19-2、举一个例子" aria-hidden="true">#</a> 19.2、举一个例子</h3><p><strong>（1）应用 Vite 来构建项目</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm install pnpm -g
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>pnpm create vite
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>（2）options-api</strong></p><p><strong>（3）composition-api</strong></p><h3 id="_19-3、setup" tabindex="-1"><a class="header-anchor" href="#_19-3、setup" aria-hidden="true">#</a> 19.3、setup()</h3><p><strong>（1）基本使用</strong></p><p><strong>（2）访问 Prop</strong></p><p><strong>（3）setup 的上下文</strong></p><p><strong>（4）与渲染函数一起使用</strong></p><h3 id="_19-4、核心" tabindex="-1"><a class="header-anchor" href="#_19-4、核心" aria-hidden="true">#</a> 19.4、核心</h3><p>（1）ref()</p><p>（2）computed()</p><p>（3）reactive()</p><p>（4）readonly()</p><p>（5）watchEffect()</p><p>（6）watch()</p><h3 id="_19-5、工具" tabindex="-1"><a class="header-anchor" href="#_19-5、工具" aria-hidden="true">#</a> 19.5、工具</h3><p>（1）isRef()</p><p>（2）unRef()</p><p>（3）toRef()</p><p>（4）toRefs()</p><p>（5）isProxy()</p><p>（6）isReactive()</p><p>（7）isReadonly()</p><h3 id="_19-6、声明周期钩子" tabindex="-1"><a class="header-anchor" href="#_19-6、声明周期钩子" aria-hidden="true">#</a> 19.6、声明周期钩子</h3><ul><li><code>beforeCreate</code> -&gt; 使用 <code>setup()</code></li><li><code>created</code> -&gt; 使用 <code>setup()</code></li><li><code>beforeMount</code> -&gt; <code>onBeforeMount</code></li><li><code>mounted</code> -&gt; <code>onMounted</code></li><li><code>beforeUpdate</code> -&gt; <code>onBeforeUpdate</code></li><li><code>updated</code> -&gt; <code>onUpdated</code></li><li><code>beforeDestroy</code> -&gt; <code>onBeforeUnmount</code></li><li><code>destroyed</code> -&gt; <code>onUnmounted</code></li></ul><p>（1）onMounted()</p><p>（2）onUpdated()</p><p>（3）onUnmounted()</p><p>（4）onBeforeMount()</p><p>（5）onBeforeUpdate()</p><p>（6）onBeforeUnmount()</p><h3 id="_19-7、依赖注入" tabindex="-1"><a class="header-anchor" href="#_19-7、依赖注入" aria-hidden="true">#</a> 19.7、依赖注入</h3><p>（1）provide()</p><p>（2）inject()</p><h3 id="_19-8、-script-setup" tabindex="-1"><a class="header-anchor" href="#_19-8、-script-setup" aria-hidden="true">#</a> 19.8、<code>&lt;script setup&gt;</code></h3><p>改造第一个例子。</p><h2 id="_20、vue-router-4-x-组合式api" tabindex="-1"><a class="header-anchor" href="#_20、vue-router-4-x-组合式api" aria-hidden="true">#</a> 20、<strong>Vue Router 4.x</strong> <strong>组合式</strong>API</h2><h3 id="_20-1、在-vite-下安装-vue-router-4-x" tabindex="-1"><a class="header-anchor" href="#_20-1、在-vite-下安装-vue-router-4-x" aria-hidden="true">#</a> 20.1、在 vite 下安装 Vue Router 4.x</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>pnpm i vue-router@4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="定义路由" tabindex="-1"><a class="header-anchor" href="#定义路由" aria-hidden="true">#</a> 定义路由</h3><h3 id="_20-2、引入路由" tabindex="-1"><a class="header-anchor" href="#_20-2、引入路由" aria-hidden="true">#</a> 20.2、引入路由</h3><h3 id="_20-3、userouter-useroute" tabindex="-1"><a class="header-anchor" href="#_20-3、userouter-useroute" aria-hidden="true">#</a> 20.3、useRouter()，useRoute()</h3><h3 id="_20-4、watch-路由变化" tabindex="-1"><a class="header-anchor" href="#_20-4、watch-路由变化" aria-hidden="true">#</a> 20.4、watch 路由变化</h3><h3 id="_20-5、onbeforerouteleave-守卫" tabindex="-1"><a class="header-anchor" href="#_20-5、onbeforerouteleave-守卫" aria-hidden="true">#</a> 20.5、onBeforeRouteLeave() 守卫</h3><h3 id="_20-6、onbeforerouteupdate-守卫" tabindex="-1"><a class="header-anchor" href="#_20-6、onbeforerouteupdate-守卫" aria-hidden="true">#</a> 20.6、onBeforeRouteUpdate() 守卫</h3><h2 id="_21、vuex-4-x-组合式api" tabindex="-1"><a class="header-anchor" href="#_21、vuex-4-x-组合式api" aria-hidden="true">#</a> <strong>21</strong>、Vuex 4.x <strong>组合式</strong>API</h2><h3 id="_21-1、在-vite-下安装-vuex" tabindex="-1"><a class="header-anchor" href="#_21-1、在-vite-下安装-vuex" aria-hidden="true">#</a> 21.1、在 vite 下安装 Vuex</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>pnpm install vuex@next --save
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_21-2、定义-store" tabindex="-1"><a class="header-anchor" href="#_21-2、定义-store" aria-hidden="true">#</a> 21.2、定义 store</h3><h3 id="_21-3、引入-store" tabindex="-1"><a class="header-anchor" href="#_21-3、引入-store" aria-hidden="true">#</a> 21.3、引入 store</h3><h3 id="_21-4、usestore" tabindex="-1"><a class="header-anchor" href="#_21-4、usestore" aria-hidden="true">#</a> 21.4、useStore()</h3><h1 id="二、pinia" tabindex="-1"><a class="header-anchor" href="#二、pinia" aria-hidden="true">#</a> 二、pinia</h1><figure><img src="https://vuex.vuejs.org/vuex.png" alt="vuex" tabindex="0" loading="lazy"><figcaption>vuex</figcaption></figure><figure><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fp3.itc.cn%2Fq_70%2Fimages01%2F20220607%2F6d60122e82d14ef3890ea1a477cb8e60.png&amp;refer=http%3A%2F%2Fp3.itc.cn&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=auto?sec=1658450922&amp;t=645adb43cad25ad8bd8548f9bc64dcd0" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>`,57),q={href:"https://pinia.web3doc.top/",target:"_blank",rel:"noopener noreferrer"},j=s(`<h1 id="三、在-vue3-中使用-ts" tabindex="-1"><a class="header-anchor" href="#三、在-vue3-中使用-ts" aria-hidden="true">#</a> 三、在 Vue3 中使用 TS</h1><p>像 TypeScript 这样的类型系统可以在编译时通过静态分析检测出很多常见错误。这减少了生产环境中的运行时错误，也让我们在重构大型项目的时候更有信心。通过 IDE 中基于类型的自动补全，TypeScript 还改善了开发体验和效率。</p><p>Vue 本身就是用 TypeScript 编写的，并对 TypeScript 提供了头等的支持。所有的 Vue 官方库都提供了类型声明文件，开箱即用。</p><h2 id="_1、准备工作" tabindex="-1"><a class="header-anchor" href="#_1、准备工作" aria-hidden="true">#</a> 1、准备工作</h2><h3 id="_1-1、使用-create-vue-创建项目" tabindex="-1"><a class="header-anchor" href="#_1-1、使用-create-vue-创建项目" aria-hidden="true">#</a> 1.1、使用 create-vue 创建项目</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm init vue@3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_1-2、在-vite-中使用-typescript" tabindex="-1"><a class="header-anchor" href="#_1-2、在-vite-中使用-typescript" aria-hidden="true">#</a> 1.2、在 Vite 中使用 TypeScript</h3><p>Vite 天然支持引入 .ts 文件。</p><p>Vite 仅执行 .ts 文件的转译工作，并不执行任何类型检查。</p><p>并假设类型检查已经被你的 IDE 或构建过程接管了。</p><p>你可以在构建脚本中运行 tsc --noEmit。</p><p>或者安装 vue-tsc 然后运行 vue-tsc --noEmit 来对你的 *.vue 文件做类型检查。</p>`,12),V={href:"https://github.com/evanw/esbuild",target:"_blank",rel:"noopener noreferrer"},w=s('<h3 id="_1-3、常见的使用说明" tabindex="-1"><a class="header-anchor" href="#_1-3、常见的使用说明" aria-hidden="true">#</a> 1.3、常见的使用说明</h3><ul><li><code>defineComponent()</code></li></ul><h2 id="_2、ts-与组合式-api" tabindex="-1"><a class="header-anchor" href="#_2、ts-与组合式-api" aria-hidden="true">#</a> 2、TS 与组合式 API</h2><h3 id="_2-1、为组件的-prop-标注类型" tabindex="-1"><a class="header-anchor" href="#_2-1、为组件的-prop-标注类型" aria-hidden="true">#</a> 2.1、为组件的 prop 标注类型</h3><h3 id="_2-2、为组件的-emit-标注类型" tabindex="-1"><a class="header-anchor" href="#_2-2、为组件的-emit-标注类型" aria-hidden="true">#</a> 2.2、为组件的 emit 标注类型</h3><h3 id="_2-3、为-ref-标注类型" tabindex="-1"><a class="header-anchor" href="#_2-3、为-ref-标注类型" aria-hidden="true">#</a> 2.3、为 ref() 标注类型</h3><h3 id="_2-4、为-reactive-标注类型" tabindex="-1"><a class="header-anchor" href="#_2-4、为-reactive-标注类型" aria-hidden="true">#</a> 2.4、为 reactive() 标注类型</h3><h3 id="_2-5、为-computed-标注类型" tabindex="-1"><a class="header-anchor" href="#_2-5、为-computed-标注类型" aria-hidden="true">#</a> 2.5、为 computed() 标注类型</h3><h3 id="_2-6、为事件处理器标注类型" tabindex="-1"><a class="header-anchor" href="#_2-6、为事件处理器标注类型" aria-hidden="true">#</a> 2.6、为事件处理器标注类型</h3><h3 id="_2-7、为-project-inject-标注类型" tabindex="-1"><a class="header-anchor" href="#_2-7、为-project-inject-标注类型" aria-hidden="true">#</a> 2.7、为 project/inject 标注类型</h3><h3 id="_2-8、为模板-ref-标注类型" tabindex="-1"><a class="header-anchor" href="#_2-8、为模板-ref-标注类型" aria-hidden="true">#</a> 2.8、为模板 ref 标注类型</h3><h1 id="四、vite2" tabindex="-1"><a class="header-anchor" href="#四、vite2" aria-hidden="true">#</a> 四、Vite2</h1><h3 id="_1、vite-支持-vue3-使用-jsx" tabindex="-1"><a class="header-anchor" href="#_1、vite-支持-vue3-使用-jsx" aria-hidden="true">#</a> 1、Vite 支持 Vue3 使用 JSX</h3><h3 id="_2、在-vite-中使用-css" tabindex="-1"><a class="header-anchor" href="#_2、在-vite-中使用-css" aria-hidden="true">#</a> 2、在 Vite 中使用 CSS</h3><h3 id="_3、vite-静态资源引用" tabindex="-1"><a class="header-anchor" href="#_3、vite-静态资源引用" aria-hidden="true">#</a> 3、Vite 静态资源引用</h3><h3 id="_4、构建生产版本" tabindex="-1"><a class="header-anchor" href="#_4、构建生产版本" aria-hidden="true">#</a> 4、构建生产版本</h3><h3 id="_5、环境变量和模式" tabindex="-1"><a class="header-anchor" href="#_5、环境变量和模式" aria-hidden="true">#</a> 5、环境变量和模式</h3><h3 id="_6、腾讯云-webify-项目部署" tabindex="-1"><a class="header-anchor" href="#_6、腾讯云-webify-项目部署" aria-hidden="true">#</a> 6、腾讯云 Webify 项目部署</h3><h3 id="_7、vite-与-java-后端集成" tabindex="-1"><a class="header-anchor" href="#_7、vite-与-java-后端集成" aria-hidden="true">#</a> 7、Vite 与 JAVA 后端集成</h3>',19);function S(A,C){const t=l("ExternalLinkIcon");return o(),c("div",null,[r,a("p",null,[n("从 "),a("a",d,[k,n(" 已被废弃"),e(t)]),n("开始，Vue 3 继续支持这一点就不再有意义了。因此，现在建议对任何要用作修饰符的键使用 kebab-cased (短横线) 名称。")]),v,a("p",null,[n("通常，当我们需要从父组件向子组件传递数据时，我们使用 "),a("a",m,[n("props"),e(t)]),n("。想象一下这样的结构：有一些深度嵌套的组件，而深层的子组件只需要父组件的部分内容。在这种情况下，如果仍然将 prop 沿着组件链逐级传递下去，可能会很麻烦。")]),g,a("p",null,[n("在 3.x 中，"),h,n(" property 已被移除，且不再支持。如果你需要访问子组件实例，我们建议使用 "),a("a",b,[n("$refs"),e(t)]),n("。")]),f,a("p",null,[a("a",x,[n("https://vue3js.cn/vue-composition-api/#生命周期钩子函数"),e(t)])]),_,i(" ![image-20220620194238746](./images/image-20220620194238746.png) "),y,a("p",null,[n("pinia 中文文档："),a("a",q,[n("https://pinia.web3doc.top/"),e(t)])]),j,a("p",null,[n("Vite 使用 "),a("a",V,[n("esbuild"),e(t)]),n(" 将 TypeScript 转译到 JavaScript，约是 tsc 速度的 20~30 倍，同时 HMR 更新反映到浏览器的时间小于 50ms。")]),w])}const T=p(u,[["render",S],["__file","Vue3.html.vue"]]);export{T as default};
