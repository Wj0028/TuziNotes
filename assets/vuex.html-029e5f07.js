import{_ as t,W as p,X as e,a0 as o,Y as n,$ as s,a1 as c,Z as l,C as i}from"./framework-5fb02f36.js";const u={},r=n("h1",{id:"vuex",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#vuex","aria-hidden":"true"},"#"),s(" vuex")],-1),k=n("p",null,"场景: 如果在应用中出现了大量的组件都要共享同一个状态, 可以利用状态提升的思想,将这些共享状态提升到他们共同的父级组件身上(往往找到了 App), 如果这样共享状态较多的话, 会导致 App 中维护了太多状态, 逻辑不清晰, 不方便与更新维护, 而且在 Vue3 中可以利用 provideInject 来进行数据跨层级的传递, 在 vue2 中 provideInject 传递的数据不是响应的数据, 一级一级传递又过于繁琐不科学, 那怎么办呢?",-1),d=n("p",null,"在这样的情况下就要用到 vuex(共享状态管理工具). 只能在 vue 中使用, 集中式的存储状态, 更新和使用状态都要按照 vuex 的规则来运行.",-1),v={href:"https://postimg.cc/bG09Xrs7",target:"_blank",rel:"noopener noreferrer"},m=l(`<p>什么时候使用 vuex? vuex 之前已经有这样的状态管理的解决方案:flux -&gt; redux 等等, 在 flux 和 redux 的概念有一点说的很好, flux 就像眼镜一样, 当你觉得需要用到的时候就可以用.</p><h2 id="vuex-的使用" tabindex="-1"><a class="header-anchor" href="#vuex-的使用" aria-hidden="true">#</a> Vuex 的使用</h2><p>想要使用 vuex, 需要先创建一个 store(仓库, 管理状态): createStore</p><p>createStore 中可以传入 store 的配置项, 在其中可以配置: state/mutations/actions....</p><p>创建好 store 之后, 可以像 router 一样, 通过 app 去 use 一下, 组件内部就可以通过 this.$store 来取用</p><h3 id="state" tabindex="-1"><a class="header-anchor" href="#state" aria-hidden="true">#</a> State</h3><p>可以在配置的 state 中挂载数据, 使用数据的时候 可以通过 store.state 来取用</p><p>在组件中可以通过$store 来取用数据</p><p>所有的状态都可以挂载 state 上, 保持&quot;唯一数据源&quot;</p><p>vuex 推荐我们在组件中, 利用计算属性来取 state 的值, 这样定义好计算属性后, 就可以非常方便使用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token function">count</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>count
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>vuex 也提供了 mapState 辅助函数, 可以帮我们方便快捷的将 state 放置到 computed 计算属性中, 返回值是一个计算属性的对象， 所以他的使用方式：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token comment">// computed: mapState(),</span>
  <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 这里做与state相关的处理</span>
    <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token comment">// 正常做组件内其他的计算属性</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>mapState 中可以传入数组或者对象， 甚至可以在数组中放对象：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 数组中直接写入想要取到state中的数据的键名</span>
<span class="token comment">// computed: mapState([&#39;count&#39;, &#39;message&#39;]),</span>
<span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// 键名为取出来使用时候的数据的名字, 可以不与state中一样, 值为函数, 函数能接收到state, 直接返回对于数据</span>
  <span class="token comment">// num: state =&gt; state.count</span>
  <span class="token comment">// num: &#39;count&#39;,</span>
  <span class="token comment">// 常规函数, 可以使用用this上的,当前组件自身的一些数据</span>
  <span class="token function">num</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>step
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>不要将所有的状态不经思考的全部放到 vuex 中管理， 这样的话理论上可以让组件更纯粹（只去渲染数据， 不维护数据， 真正成为视图），但是在实际应用的时候会发现这样会导致逻辑更冗余更乱， 所以还是只将需要共享的状态交由 vuex 管理。</p></blockquote><h3 id="getters" tabindex="-1"><a class="header-anchor" href="#getters" aria-hidden="true">#</a> Getters</h3><p>有的时候，我们会需要根据 state 中的数据派生出一个新的数据： state.count -&gt;-&gt; doubleCount, 如果在组件中利用 mapState 取得 count 之后， 由组件完成派生的过程也能实现效果， 但是如果多个组件都要使用到 doubleCount， 就需要在每个组件中都写入这段派生的逻辑， 很明显不科学。</p><p>vuex 提供了 getters， 可以在 stoire 中配置，配置的时候就可以实现从 state 中派生的逻辑： state -&gt; 派生 -&gt; getters</p><p>创建 getters 的方法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token literal-property property">getters</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">tripleCount</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> getters</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> state<span class="token punctuation">.</span>count <span class="token operator">*</span> <span class="token number">3</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">doubleCount</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> getters</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> state<span class="token punctuation">.</span>count <span class="token operator">*</span> <span class="token number">2</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// 第一个参数为state， 第二个参数为getters， 可以取用其他的getters</span>
    <span class="token function-variable function">fifthCount</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> getters</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> getters<span class="token punctuation">.</span>doubleCount <span class="token operator">+</span> getters<span class="token punctuation">.</span>tripleCount
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在组件中取用的时候与 state 一样， 需要通过计算属性来取值， 只是需要从 this.$store.getters 来取用：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token function">doubleCount</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>doubleCount
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">tripleCount</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>tripleCount
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token function">fifthCount</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>fifthCount
      <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样的话， 就可以将复杂的派生的逻辑， 放入到 getters 中实现， 组件只需要取用 getters 就可以了。</p><p>getters 的设置方法还有一种，可以将 getters 设置成一个函数, 这样就可以在使用 getters 的时候传递参数：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
	<span class="token comment">// timesCount: (state) =&gt; {</span>
	<span class="token comment">//   return (x) =&gt; {</span>
	<span class="token comment">//     return state.count * x</span>
	<span class="token comment">//   }</span>
	<span class="token comment">// },</span>
	<span class="token function-variable function">timesCount</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>count <span class="token operator">*</span> x<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// use</span>
store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span><span class="token function">timesCount</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数 getters 使用方式：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// computed</span>
<span class="token function">timesCount</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>timesCount
<span class="token punctuation">}</span>
<span class="token comment">// template</span>
timesCount<span class="token operator">-</span><span class="token number">8</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token function">timesCount</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>getters 也有自己配套的 mapGetters 辅助函数，使用方式和 mapState 一样：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;doubleCount&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;tripleCount&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;fifthCount&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">timesCount</span><span class="token operator">:</span> <span class="token string">&#39;timesCount&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="mutations" tabindex="-1"><a class="header-anchor" href="#mutations" aria-hidden="true">#</a> Mutations</h3><p>mutations 也需要配置在 store 的配置项中, 需要以键值对的形式来存储, 键名是 mutation 的名字, 值应该为一个函数</p><p>创建好之后, 想要调用 mutation 的话, 需要通过 store 的 commit 方法来提交一个 mutation</p><p>mutation 在提交的时候, 会接收到两个参数, 第一个参数为 state, 第二个为 payload</p><p>在 mutation 方法内部就可以通过 state 来修改状态, 也可以通过 payload 来接受参数, 传递参数的方式为: commit(mutationName, payload), payload 是&quot;载荷&quot;, 其实就是承载参数的, 如果可能传递多个参数, 使用 payload 来传递最合理.</p><p>所以说， vuex 又给出一种提交 方案， 将 mutation.type 和 mutation.payload 结合到一起：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">,</span> <span class="token operator">...</span>payload <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 采用这样的方法的时候， 除type外，其他所有的字段都会放入到payload</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>$store.commit({ type: &#39;decrement&#39; })<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>decrement<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>$store.commit({ type: &#39;increment&#39; })<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>increment<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>$store.commit({ type: &#39;random&#39; })<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>random<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>$store.commit({ type: &#39;update&#39;, payload: { num: n } })<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>n in [5, 10, 20]<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>n<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>update: {{ n }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>vuex 推荐我们将 mutation 的 type 定义成常量， 这样可以避免一些因为 type 被修改，导致提交了错误的 mutation， 错误的修改了转头， 造成损失。vuex 推荐我们将这些 type 单独放到一个独立的文件， 提高整个项目的可读性</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// types.js</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">COUNTER_INCREMENT_TYPE</span> <span class="token operator">=</span> <span class="token string">&#39;COUNTER_INCREMENT_TYPE&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">COUNTER_DECREMENT_TYPE</span> <span class="token operator">=</span> <span class="token string">&#39;COUNTER_DECREMENT_TYPE&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">COUNTER_RANDOM_TYPE</span> <span class="token operator">=</span> <span class="token string">&#39;COUNTER_RANDOM_TYPE&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">COUNTER_UPDATE_TYPE</span> <span class="token operator">=</span> <span class="token string">&#39;COUNTER_UPDATE_TYPE&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// store</span>
<span class="token punctuation">{</span>
  <span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token constant">COUNTER_DECREMENT_TYPE</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// console.log(&#39;decrement&#39;)</span>
      <span class="token comment">// 更改状态</span>
      state<span class="token punctuation">.</span>count<span class="token operator">--</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token constant">COUNTER_INCREMENT_TYPE</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// console.log(&#39;increment&#39;)</span>
      <span class="token comment">// 更改状态</span>
      state<span class="token punctuation">.</span>count<span class="token operator">++</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token constant">COUNTER_RANDOM_TYPE</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// console.log(&#39;random&#39;)</span>
      state<span class="token punctuation">.</span>count <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token constant">COUNTER_UPDATE_TYPE</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> payload</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> <span class="token punctuation">{</span> title<span class="token punctuation">,</span>  num <span class="token punctuation">}</span> <span class="token operator">=</span> payload
      <span class="token comment">// console.log(&#39;update:&#39;, title || num)</span>
      state<span class="token punctuation">.</span>count <span class="token operator">=</span> num
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>$store.commit({ type: COUNTER_DECREMENT_TYPE })<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>decrement<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>$store.commit({ type: COUNTER_INCREMENT_TYPE })<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>increment<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>$store.commit({ type: COUNTER_RANDOM_TYPE })<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>random<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>
			<span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>$store.commit({ type: COUNTER_UPDATE_TYPE, num: n })<span class="token punctuation">&quot;</span></span>
			<span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>n in [5, 10, 20]<span class="token punctuation">&quot;</span></span>
			<span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>n<span class="token punctuation">&quot;</span></span>
		<span class="token punctuation">&gt;</span></span>
			update: {{ n }}
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> mapState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vuex&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> <span class="token constant">TYPES</span> <span class="token keyword">from</span> <span class="token string">&#39;./types&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
	<span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Counter&#39;</span><span class="token punctuation">,</span>
	<span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token punctuation">{</span>
			<span class="token literal-property property">step</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
			<span class="token operator">...</span><span class="token constant">TYPES</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：<strong>mutation 必须是同步函数</strong>，(能生效， 也别这么干) 也就是说在 mutation 中不要做异步动作， 因为 mutation 中每一个动作都会被 dev-tools 捕捉，我们在做 debug 的时候， 可以方便看到整个状态是怎么变化， 如果 mutation 中存在异步逻辑， 导致 dev-tools 无法准确记录变化过程，对 debug 造成影响。</p><p>mutation 也有自己配套的 mapMutations 方法， 可以将 mutations 中的 mutation 遍历到组件的 methods 中， 到时候就可以通过 this 来调用.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// script</span>
<span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">increment</span><span class="token operator">:</span> <span class="token constant">TYPES</span><span class="token punctuation">.</span><span class="token constant">COUNTER_INCREMENT_TYPE</span><span class="token punctuation">,</span>
    <span class="token literal-property property">decrement</span><span class="token operator">:</span> <span class="token constant">TYPES</span><span class="token punctuation">.</span><span class="token constant">COUNTER_DECREMENT_TYPE</span><span class="token punctuation">,</span>
    <span class="token literal-property property">random</span><span class="token operator">:</span> <span class="token constant">TYPES</span><span class="token punctuation">.</span><span class="token constant">COUNTER_RANDOM_TYPE</span><span class="token punctuation">,</span>
    <span class="token literal-property property">asyncRandom</span><span class="token operator">:</span> <span class="token constant">TYPES</span><span class="token punctuation">.</span><span class="token constant">COUNTER_ASYNC_RANDOM_TYPE</span><span class="token punctuation">,</span>
    <span class="token literal-property property">update</span><span class="token operator">:</span> <span class="token constant">TYPES</span><span class="token punctuation">.</span><span class="token constant">COUNTER_UPDATE_TYPE</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// template</span>
<span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">&quot;decrement&quot;</span><span class="token operator">&gt;</span>decrement<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">&quot;increment&quot;</span><span class="token operator">&gt;</span>increment<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">&quot;random&quot;</span><span class="token operator">&gt;</span>random<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">&quot;asyncRandom&quot;</span><span class="token operator">&gt;</span><span class="token keyword">async</span> random<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">&quot;update({ num: n })&quot;</span> v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">&quot;n in [5, 10, 20]&quot;</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">&quot;n&quot;</span><span class="token operator">&gt;</span>update<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> n <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="actions" tabindex="-1"><a class="header-anchor" href="#actions" aria-hidden="true">#</a> Actions</h3><p>前面说道， 异步逻辑不能放在 mutations 中， 那么可以放在组件中吗？</p><p>在没有使用 vuex 之前， 组件自己承担相关各种逻辑， 在引入 vuex 之后，对应的组件，就应该减少对数据·操作相关的逻辑， 尽量保持纯粹（取用数据、渲染数据）。</p><p>那么这些与 store 中状态更改相关的异步逻辑最好防止在 vuex 提供的 actions 上。</p><p>action 的配置方法与 mutations， 本身也是一些方法的集合体</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">getters</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span>方法名<span class="token punctuation">]</span>： 函数（方法本体）
    <span class="token function-variable function">asyncRandom</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// 可以在这里执行异步逻辑</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>actions 中的方法如果调用？应该利用 store.dispatch 来<strong>派发</strong>这个<strong>动作</strong>:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">&#39;asyncRandomUpdate&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>那么在 actions 的方法中如何提交一个或者多个对应的 mutations？</p><p>actions 的方法中会接受到 context 和 payload， context 身上包含有几乎所有的 store 的 api：dispatch/commit/state/getters， 但是这个不是真正 store， 而是当前的片段中传入的“一部分 store”:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token function">asyncRandomUpdate</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> disptach<span class="token punctuation">,</span> commit<span class="token punctuation">,</span> state<span class="token punctuation">,</span> getters <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> random <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>
      <span class="token comment">// 提交mutations</span>
      <span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token constant">COUNTER_UPDATE_TYPE</span><span class="token punctuation">,</span> <span class="token literal-property property">num</span><span class="token operator">:</span> random <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面的代码可以看到， actions 的方法中可以派发其他 action、提交一个或者多个对应的 mutation，也可以拿到 state 和 getters 做出判断后进行分流处理（不能直接修改 state）。</p><p>当然也可以传递参数：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token function">asyncRandomUpdate</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> disptach<span class="token punctuation">,</span> commit<span class="token punctuation">,</span> state<span class="token punctuation">,</span> getters <span class="token punctuation">}</span><span class="token punctuation">,</span> payload</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> random <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> payload<span class="token punctuation">.</span>range<span class="token punctuation">)</span>
      <span class="token comment">// 提交mutations</span>
      <span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token constant">COUNTER_UPDATE_TYPE</span><span class="token punctuation">,</span> <span class="token literal-property property">num</span><span class="token operator">:</span> random <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">&#39;asyncRandomUpdate&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">range</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;asyncRandomUpdate&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">range</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在组件中也可以通过$store.dispatch 来派发动作:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">,</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>也可以使用 mapActions 辅助函数， 使用方式和 mapMutations 一样</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
       <span class="token operator">...</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>串行 Actions， 如果在一个 actions 中要派发多个 actions， 并且要有先后顺序的调用（A 执行完成后再执行 B），就可以让对应的 action 方法返回一个 promise 对象， 因为 disptach 在派发 actions 的时候， dispatch 的返回结果其实就是 actions 的返回结果， 所以就可以通过 dispatch 来得到 actions 执行的 promise，那么就可以利用 promise 特性来串行执行。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>		<span class="token function">asyncRandomUpdate</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> disptach<span class="token punctuation">,</span> commit<span class="token punctuation">,</span> state<span class="token punctuation">,</span> getters <span class="token punctuation">}</span><span class="token punctuation">,</span> payload</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> random <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> payload<span class="token punctuation">.</span>range<span class="token punctuation">)</span>
          <span class="token comment">// 提交mutations</span>
          <span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token constant">COUNTER_UPDATE_TYPE</span><span class="token punctuation">,</span> <span class="token literal-property property">num</span><span class="token operator">:</span> random <span class="token punctuation">}</span><span class="token punctuation">)</span>
          <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// asyncRandomUpdateTwice ({ dispatch }, payload) {</span>
    <span class="token comment">//   // 连续的调用asyncRandomUpdate两次</span>
    <span class="token comment">//   dispatch({</span>
    <span class="token comment">//     type: &#39;asyncRandomUpdate&#39;,</span>
    <span class="token comment">//     range: payload.range</span>
    <span class="token comment">//   }).finally(() =&gt; {</span>
    <span class="token comment">//     dispatch({</span>
    <span class="token comment">//       type: &#39;asyncRandomUpdate&#39;,</span>
    <span class="token comment">//       range: payload.range</span>
    <span class="token comment">//     })</span>
    <span class="token comment">//   })</span>
    <span class="token comment">// },</span>
    <span class="token keyword">async</span> <span class="token function">asyncRandomUpdateTwice</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> dispatch <span class="token punctuation">}</span><span class="token punctuation">,</span> payload</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 连续的调用asyncRandomUpdate两次</span>
      <span class="token keyword">await</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;asyncRandomUpdate&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">range</span><span class="token operator">:</span> payload<span class="token punctuation">.</span>range
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token keyword">await</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;asyncRandomUpdate&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">range</span><span class="token operator">:</span> payload<span class="token punctuation">.</span>range
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;asyncRandomUpdate&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">range</span><span class="token operator">:</span> payload<span class="token punctuation">.</span>range
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="modules" tabindex="-1"><a class="header-anchor" href="#modules" aria-hidden="true">#</a> Modules</h3><p>在应用越来越庞大的时候，不可能将一个应用所有需要管理的、共享的、状态都放在 store.state 中，这样会导致代码非常臃肿， 不便于维护， 也不便于多人协作， vue 提供出了 modules 概念，可以在 store 中划分模块，来进行逻辑焦点分离</p><p>Store （rootState）：modules: moduleA(state)/moduleB(state)</p><blockquote><p>模块中的 state 需要写成函数返回对象的形式，因为模块有被复用的可能性</p></blockquote><p>划分模块之后， rootState 的状态可以直接 store.state 来取用， 模块中的 state，需要通过 store.state.moduleName 来取用</p><p>但是需要注意的是，getters/actions/mutations 函数都可以获取到当前模块的相关 api， 也可以获取到 root 作用域的相关 api, 但是最终会把多个模块的 getters 之类的都挂载到 root 作用域上, 很容易出现重名覆盖的问题。</p><p>所以推荐大家，为每个模块设置 namespaced 属性为 true， 这样的话，getters 等等内容，虽然还是回直接挂载到 root 上，但是名字已经有隔离了 &#39;moduleName/getterName&#39;</p><p>这样使用就简单了：</p><ol><li>store 中 root 的部分， 取值与之前一直， 相对于模块来说，状态等等之类的称为： rootState/rootGetters...</li><li>划分模块后， 最好给模块添加 namespaced:true， 这样， geeters 的数据名字、actions 和 mutations 的 type 名字，在调用的时候都要前面添加&#39;moduleName/&#39;,</li><li>如果使用辅助函数的话，直接在辅助函数最前面参数传入对应模块的名字</li><li>可以使用 createNamespacedHelper 来创建某个模块独有的辅助函数， 但是如果一个组件要使用多个模块相关 api 的时候，这个方法就有点鸡肋了。</li></ol>`,74);function b(g,y){const a=i("ExternalLinkIcon");return p(),e("div",null,[r,k,d,o(" ![11](/public/images/vuex.png) "),n("p",null,[n("a",v,[s("asdfcsa.png"),c(a)])]),m])}const E=t(u,[["render",b],["__file","vuex.html.vue"]]);export{E as default};
